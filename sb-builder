#!/usr/bin/env node

// Require our dependencies
var program = require('commander');
var ytdl    = require('ytdl-core');
var fs      = require('fs-extra');
var async   = require('async');
var log     = console.log;
var mkdirp  = require('mkdirp');
var URL     = require('url');
var qs      = require('querystring');
var sprintf = require("sprintf-js").sprintf;
var spawn   = require('child_process').spawnSync;
var config  = {
    sourcesPath       : './sources',
    soundsPath        : './sounds',
    tmpPath           : './tmp',
    manifestVersion   : 'v1',
    defaultClipMargin : '2',
    soundEditCommand  : 'audacity'
};

program.version('0.0.1');


program.command('init <name>')
    .description('kickoff a new soundboard project')
    .action(init);

program.command('download <URL>')
    .description('download sound from Youtube URL provided, and save metadata in manifest')
    .action(download);

program.command('snip <ID|URL>')
    .description('open external sound edition application to extract sound snippet')
    .action(snip);

program.command('render')
    .description('generates soundboard website')
    .action(render);

program.command('manifest', 'Perform operations based on the manifest');


/*************
 * Functions *
 *************/

function init(name){
    async.waterfall([
        function(next){
            var folders = [
                config.tmpPath,
                config.sourcesPath,
                config.soundsPath
            ];
            async.each(folders, mkdirp, next);
        },
        function(next){
            _save_manifest(name, next);
        }],
        function(err){
            if(err){ console.log('Error setting up basic stuff', err); }
        }
    );
};

function snip(){
    var arg = arguments[0];
    var manifest;
    var snipData = {};

    async.waterfall([
        // Read manifest
        function(next){ _read_manifest(next); },
        // Handle arguments and check if video ID exists
        function(manif, next){
            manifest = manif;
            var info = _snip_handle_arguments(arg);

            if(! info.id in manifest.sources){
                return next({
                    error: 'no_such_video',
                    no_such_video: 'Video with ID '+id+' has not been downloaded yet!'
                });
            }
            snipData.id = sprintf("%06d",+Object.keys(manifest.sounds).length+1);
            snipData.path = config.soundsPath+'/'+snipData.id;

            var srcPath = manifest.sources[info.id].path;
            fs.copy(srcPath, snipData.path, next);
        },
        function(next){
            spawn(config.soundEditCommand, [snipData.path]);
        }],
        function(err){
        }
    );
}

function _snip_handle_arguments(){
    var id, t, url;

    if(arguments[0].match(/youtube\.com/)){
        var urlInfo = URL.parse(arguments[0]);
        var params = qs.parse(urlInfo.query);
        id = params.v;
        t = params.t;
    } else if(arguments[0].match(/youtu\.be/)){
        var urlInfo = URL.parse(arguments[0]);
        var params = qs.parse(urlInfo.query);
        urlInfo.pathname.match(/^\/(\w+)$/);
        id = RegExp.$1
        t = params.t;
    }
    else { id = arguments[0]; }
    var info = {};
    if(t){ info.t = t; }
    info.id = id;
    return info;
}

function render(){
    console.warn('Not implemented yet!');
};

function download(videoURL){
    var manifest;
    async.waterfall([
        // Read manifest
        function(next){
            _read_manifest(next);
        },
        // Download video sound track
        function(data, next){
            manifest = data;
            _download_video(videoURL, manifest, next);
        },
        // Store information in manifest
        function(videoData, next){
            _write_source_in_manifest(videoData, manifest, next);
        }],
        function(err){
            if(err){ error(err); }
        }
    );
};

function error(err){
    console.log('[ERROR]',err.error,':',err.message);
};

function _download_video(videoURL, manifest, callback){
    var videoData;

    async.waterfall([
        // Get video information
        function(next){
            ytdl.getInfo(videoURL, next);
        },
        // Get video file
        function(info, next){
            var videoData = {};
            videoData.id = info.video_id;
            if(manifest.sources[videoData.id]){
                return next({error: 'already_downloaded', message: 'Video already downloaded!'});
            }
            videoData.tmpPath = config.tmpPath+'/'+videoData.id;
            videoData.title = info.title;
            videoData.length = info.length_seconds;

            var video = ytdl.downloadFromInfo(info, {filter: 'audioonly'});
            video.pipe(fs.createWriteStream(videoData.tmpPath));


            video.on('error', next);

            video.on('format', function(format){
                videoData.size = format.size;
                videoData.path = config.sourcesPath+'/'+videoData.id+'.'+format.container;

                var pos = 0;
                video.on('data', function(data) {
                    pos += data.length;
                    if (videoData.size) {
                        var percent = (pos / videoData.size * 100).toFixed(2);
                        process.stdout.cursorTo(0);
                        process.stdout.clearLine(1);
                        process.stdout.write(percent + '%');
                    }
                });
            });
            video.on('end',function(err){
                if(err){ return next(err); }
                return next(null, videoData);
            });
        },
        // Move video file to final path
        function(vData, next){
            videoData = vData;
            var tmpPath = videoData.tmpPath;
            var finalPath = videoData.path;
            fs.rename(tmpPath, finalPath, next);
        }],
        function(err){
            return callback(err, videoData);
        }
    );
};

function _write_source_in_manifest(videoData, manifest, callback){
    delete videoData[tmpPath];
    manifest.sources[videoData.id] = videoData;
    return _save_manifest(manifest, callback);
};

function _save_manifest(){
    var manifest, name, callback;
    if(typeof arguments[0] === 'string'){
        name = arguments[0];
        callback = arguments[1];
        manifest = {
            sources  : {},
            sounds   : {},
            metadata : {
                name: sbname,
                manifestVersion : config.manifestVersion
            }
        };
    } else {
        manifest = arguments[0];
        callback = arguments[1];
    }

    var manif = {
        metadata : manifest.metadata,
        sources  : [],
        sounds   : []
    };

    for (srcID in manifest.sources){
        manif.sources.push(manifest.sources[srcID]);
    }


    var snds = [];
    for (sndID in manifest.sounds){
        snds.push(manifest.sounds[sndID]);
    }
    snds.sort(
        function(a,b){
            return a.dateAdded > b.dateAdded ? true : false;
        }).forEach(function(snd){
            manif.sounds.push(snd);
        });

    fs.writeFile('manifest.json', JSON.stringify(manif, {}, 4), callback);
};

function _read_manifest(callback){
    async.waterfall([
        function(next){
            return fs.exists('manifest.json') ?
                next('manifest.json not found!') :
                next();
        },
        function(next){
            fs.readFile('manifest.json',{encoding:'utf8'}, function(err, data){
                if(err){ console.log('Could not read manifest.json:', err); }
                return next(null, JSON.parse(data));
            });
        }],
        function(err, data){
            if(err){ return callback(err); }
            var manifest = {
                sources : {},
                sounds: {},
                metadata: data.metadata
            };
            data.sources.forEach(function(src){
                manifest.sources[src.id] = src;
            });
            data.sounds.forEach(function(snd){
                manifest.sounds[snd.id] = snd;
            });
            return callback(null, manifest);
        }
    );
};

program.parse(process.argv);
if(!program.args.length){ program.help(); }
